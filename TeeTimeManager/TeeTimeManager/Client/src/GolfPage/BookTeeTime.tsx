import { useState } from "react";
import { FormCheck, FormControl, FormGroup, FormLabel, Button, Container } from "react-bootstrap";
import PostTeeTime from "../ApiCalls/PostTeeTime";
import { useNavigate } from "react-router-dom";

function BookTeeTime({id}: {id: number}) {
    const navigate = useNavigate();
    //state to track form inputs
    const [name, setName] = useState<string>("");
    const [holes, setHoles] = useState<string>("9");

    //handle form submission - post to db
    const handleSubmit = (event: React.FormEvent) => {
        event.preventDefault(); //prevent page refresh
        console.log("Name:", name);
        console.log("Holes:", holes);
        //passing id as -1 because it is autogenerated in the db, but needs to pass compiler check
        //should just use a DTO but that will have to be refactored later
        PostTeeTime({nameUnder: name, holes: parseInt(holes), timeSlotId: id, id: -1});
        navigate("/Golf/TimeSlots");
    };

    const handleGoBack = () => {
        navigate("/Golf/TimeSlots");
    }

    return (
        <div className="d-flex flex-column justify-content-center align-items-center">
            <h1>Book Your Round</h1>
            <form onSubmit={handleSubmit}>
                <FormGroup>
                    <FormLabel>Member Name</FormLabel>
                    <FormControl
                        id="name"
                        type="text"
                        placeholder="Who's the tee time under?"
                        value={name} //bind the input value to name
                        onChange={(e) => setName(e.target.value)} //update name on change
                    />
                </FormGroup>
                <FormGroup>
                    <FormLabel className="mx-2">Holes:</FormLabel>
                    <FormCheck
                        inline
                        name="holesRadio"
                        type="radio"
                        label="9"
                        value="9"
                        checked={holes === "9"} //bind the radio button to holes
                        onChange={(e) => setHoles(e.target.value)} //update holes on change
                    />
                    <FormCheck
                        inline
                        name="holesRadio"
                        type="radio"
                        label="18"
                        value="18"
                        checked={holes === "18"} 
                        onChange={(e) => setHoles(e.target.value)} 
                    />
                </FormGroup>
                <Container>
                <Button type="submit" variant="success"  className="m-1">
                    Submit
                </Button>
                <Button variant="danger" onClick={handleGoBack} className="m-1">Cancel</Button>
                </Container>
            </form>
        </div>
    );
}

export default BookTeeTime;